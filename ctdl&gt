///bài 1
#include <iostream>
#include <vector>

using namespace std;

void sortColors(vector<int>& arr, int low, int high) {
    if (low >= high) return;

    int mid = low;
    int pivot = 1; 

    while (mid <= high) {
        if (arr[mid] == 0) {
            swap(arr[low], arr[mid]);
            low++;
            mid++;
        }
        else if (arr[mid] == 1) {
            mid++;
        }
        else {
            swap(arr[mid], arr[high]);
            high--;
        }
    }

   
    sortColors(arr, low, mid - 1);
    
    sortColors(arr, mid, high);
}

int main() {
    vector<int> arr = { 2, 0, 2, 0, 0, 1, 0, 2, 1 };

    sortColors(arr, 0, arr.size() - 1);

    for (int color : arr) {
        cout << color << " ";
    }

    return 0;
}


///bài 2
#include <iostream>
#include <vector>
#include <cmath>

using namespace std;


bool isPrime(int n) {
    if (n < 2) return false;
    for (int i = 2; i <= sqrt(n); i++) {
        if (n % i == 0) return false;
    }
    return true;
}


bool isBlumNumber(int n) {
    for (int p = 2; p * p <= n; p++) {
        if (isPrime(p) && p % 4 == 3) {
            int q = n / p;
            if (n % p == 0 && isPrime(q) && q % 4 == 3) {
                return true;
            }
        }
    }
    return false;
}


vector<int> generateBlumNumbers(int N) {
    vector<int> blumNumbers;
    for (int i = 2; i < N; i++) {
        if (isBlumNumber(i)) {
            blumNumbers.push_back(i);
        }
    }
    return blumNumbers;
}


void findBlumPairs(const vector<int>& blumNumbers, int N) {
    cout << "Các cặp số Blum có tổng cũng là số Blum: \n";
    for (int i = 0; i < blumNumbers.size(); i++) {
        for (int j = i; j < blumNumbers.size(); j++) {
            int sum = blumNumbers[i] + blumNumbers[j];
            if (sum < N && isBlumNumber(sum)) {
                cout << blumNumbers[i] << " + " << blumNumbers[j] << " = " << sum << "\n";
            }
        }
    }
}


bool checkBlumExist(const vector<int>& blumNumbers, int M) {
    for (int num : blumNumbers) {
        if (num == M) return true;
    }
    return false;
}

int main() {
    int N;
    cout << "Nhập số N: ";
    cin >> N;

    
    vector<int> blumNumbers = generateBlumNumbers(N);

    
    cout << "Các số Blum nhỏ hơn " << N << ": ";
    for (int num : blumNumbers) {
        cout << num << " ";
    }
    cout << endl;

    
    findBlumPairs(blumNumbers, N);

    
    int M;
    cout << "Nhập số M để kiểm tra: ";
    cin >> M;
    if (checkBlumExist(blumNumbers, M)) {
        cout << M << " là một số Blum trong dãy.\n";
    }
    else {
        cout << M << " không phải là số Blum trong dãy.\n";
    }

    return 0;
}